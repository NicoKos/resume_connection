<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-kuhn-quic-bdpframe-extension-01" ipr="trust200902">
	<!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

	<!-- ***** FRONT MATTER ***** -->

	<front>
		<!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

		<title abbrev="BDP Frame Extension">BDP Frame Extension</title>

		<author fullname="Nicolas Kuhn" initials="N" surname="Kuhn">
			<organization>Thales Alenia Space</organization>
			<address>
				<email>nicolas.kuhn.ietf@gmail.com</email>
			</address>
		</author>

		<author fullname="Emile Stephan" initials="E" surname="Stephan">
			<organization>Orange</organization>
			<address>
				<email>emile.stephan@orange.com</email>
			</address>
		</author>

		<author fullname="Godred Fairhurst" initials="G" surname="Fairhurst">
			<organization>University of Aberdeen</organization>
			<address>				
				<postal>
          			<street>Department of Engineering</street>
          			<street>Fraser Noble Building</street>
          			<city>Aberdeen</city>
          			<code>AB24 3UE</code>
          			<country>Scotland, UK</country>
        			</postal>

				<email>gorry@erg.abdn.ac.uk</email>
			</address>
		</author>
	
		<author fullname="Christian Huitema" initials="C" surname="Huitema">
			<organization>Private Octopus Inc.</organization>
			<address>
				<email>huitema@huitema.net</email>
			</address>
		</author>

		<date year="2023"/>

		<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

		<!-- Meta-data Declarations -->

		<area>Transport</area>

		<workgroup>Internet Engineering Task Force</workgroup>

		<!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

		<keyword>QUIC, BDPFRAME</keyword>

		<!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

	<abstract>
		<t>
		<!-- start new in v1 vs v0 -->
                This dcoument describes the BDP_FRAME extension for QUIC.
                The frame enables the exchange of information related to the
                path characteristics between the receiver
                and the sender during a connection.
                This information can be utilised
                when a new connection is established or for application-limited
                traffic. 
                This information can also be used by the receiver to request that
		previously computed parameters related to the 
		path characteristics, are not used, when the receiver has additional information
		about the path or traffic to be sent.
		<!-- end new in v1 vs v0 -->
		</t>
	</abstract>
	</front>

	<middle>

	<section anchor="sec:introduction" title="Introduction">
		<t>
                This document proposes a method to exchange values between
                a receiver and the sender in a interoperable manner:
		<list style="numbers">
			<t>
                        For an established connection, the
                        current RTT (current_rtt), bottleneck bandwidth
                        (current_bb) and current receiver Endpoint Token 
                        (current_endpoint_token) are
                        stored as saved_rtt, saved_bb and
                        saved_endpoint_token within a BDP_FRAME;
			</t>
			<t>
                        The BDP_FRAME can be sent to the receiver and
                        the receiver can also be notified of the values of the
			BDP_FRAME parameters; 
			</t>
			<t>
			The receiver can read most of the BDP_FRAME parameters but not 
			modify any of them. The sender computes a secured hash with 
			its own selection of the parameters of the BDP_FRAME,
			encrypts the hash and sends it within the BDP_FRAME.  
			The receiver can not read the hash.
 			</t>
			<t>
			<!-- start new in v1 vs v0 -->
                        When accepting the use of previously
                        computed parameters (for application-limited
                        traffic, for new connections (either 1-RTT or
                        0-RTT), for connection resumption (wihtin 1-RTT
                        connection)) the receiver sends the BDP-FRAME to
                        the sender;
			<!-- end new in v1 vs v0 -->
			</t>
			<t>	
			The sender can then utilise the parameters from the 
			BDP_FRAME in a later new connection to the same endpoint.
			</t>
		</list>
                This method can apply to any resumed QUIC session: both
                a saved_session and a recon_session can be a 0-RTT QUIC
		connection or a 1-RTT QUIC connection.
	        </t>

                <t>
		Details of the Endpoint Token are available in <xref target="I-D.kuhn-quic-careful-resume"></xref>.
	        </t>
			
		<section anchor="sec:terms_def" title="Notations and terms">
			<t>
			<list style="symbols">
				<t>
				BDP: defined below
				</t>
				<t>
                                CWND: the congestion window used by a
                                sender (maximum number of bytes allowed in flight by the CC)
				</t>
				<t>
				current_bb : Current estimated bottleneck bandwidth
				</t>
				<t>
                                saved_bb: Estimated bottleneck bandwidth preserved
                                from a previous connection
				</t>
				<t>
				RTT: Round-Trip Time
				</t>
				<t>
				current_rtt: Current RTT
				</t>
				<t>
                                saved_rtt: RTT preserved from a previous connection
				</t>
				<t>
				endpoint_token : Endpoint Token of the receiver
				</t>
				<t>
                                current_endpoint_token : Current Endpoint Token of the receiver
				</t>
				<t>
                                saved_endpoint_token : Endpoint Token of the
                                receiver preserved from a previous connection
				</t>
				<t>
                                remembered BDP parameters: a combination
                                of saved_rtt and saved_bb
				</t>
				<t>
				secured hash : hash generated by the sender using 
				a list of parameters that it selected. The sender
				uses a private key to protect the hash. 
				</t>
			</list>
			</t>
	
			<t>
                	<xref target="RFC6349"></xref>
                        defines the BDP as follows: "Derived from
                        Round-Trip Time (RTT) and network Bottleneck
                        Bandwidth (BB), the Bandwidth-Delay Product
                        (BDP) determines the Send and Received Socket
                        buffer sizes required to achieve the maximum
                        TCP Throughput."
                        This document considers the BDP
                        estimated by a sender for the path to the receiver. This includes all
                        buffering along this network path.
		        The estimated BDP is related to the volume of 
			bytes in flight and the measured path RTT.
			</t> 
                        
			<t>
			A QUIC connection is allowed to use the procedure detailed in 
                        <xref target="RFC6349"></xref>
                        to measure the BDP, but is permitted to choose another
				method <xref target="RFC9002"></xref>.</t>
			
			<t>A sender might be able to also utilise
                        other information to estimate the BDP. 
			Congestion controllers, such as CUBIC or RENO, could estimate the
        saved_bb and current_bb values by combining the
        cwnd/flight_size and the minimum RTT. A different method could be used
        to estimate the same values when using a rate-based congestion
        controller, such as BBR <xref target="I-D.cardwell-iccrg-bbr-congestion-control"></xref>.</t>
			<t>It is important to
        consider whether a method could result in over-estimating the
        bottleneck bandwidth, and the preserved values therefore ought to be used
				with caution.</t>
 		
		</section>

		<section anchor="sec:req_language" title="Requirements Language">
			<t>
                        The keywords "MUST", "MUST NOT", "REQUIRED",
                        "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
                        "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
                        "OPTIONAL" in this document are to be
                        interpreted as described in BCP 14 
                        <xref target="RFC2119"></xref>
                        <xref target="RFC8174"></xref>
                        when, and only when, they appear in all capitals, as
                        shown here.
			</t>
			<t>
			Variable-length integer encoding is defined in section 16 of <xref target="RFC9000"></xref>.  
		</section>
	
	</section>

	<section anchor="sec:bdp_frame_section" title="BDP Frame">

		<t>
                This section describes the use of a new Frame, the BDP_FRAME.
                The BDP_FRAME can be utilized by the congestion controller
                and its data is not be limited by flow control limits. The sender and the receiver MAY
                send multiple BDP_FRAMEs in both 1-RTT and 0-RTT connections. 
		</t>

		<section anchor="sec:bdp_metadata" title="BDP_FRAME Format">

			<t>
        	        A BDP_FRAME is formatted as shown in <xref target="fig:bdp_frame_format"></xref>.
			</t>

<figure anchor="fig:bdp_frame_format" title="BDP_FRAME Format">
<artwork>
BDP_FRAME {
  Type (i) = 0xXXX,
  Hash (...),
  Lifetime (i),
  Saved BB (i),
  Saved RTT (i),
  Saved Endpoint Token (...)
}
</artwork>
</figure>
			<t>
                	A BDP_FRAME contains the following fields: 
                	<list style="symbols">
			<t>
			Hash (secured_hash): 
			The secured_hash is generated by the sender using other 
			parameters of the BDP_FRAME. The sender encrypts the hash so 
			that the receiver can not read it. 
			</t>
			<t>
                        Lifetime (extension_lifetime):
                        The extension_lifetime is a value in milliseconds,
                        encoded as a variable-length integer. This follows the design
                        of a NewSessionTicket of TLS  <xref target="RFC8446"></xref>.
			This represents the validity in time of this extension.
			</t> 

			<t>
                        Saved BB
                        (saved_bb): The
                        saved_bb is a value in bytes, encoded as a variable-length integer. The
                        bottleneck bandwidth estimated for the previous connection by
			the sender.
			Using the previous values of bytes_in_flight defined in 
                        <xref target="RFC9002"></xref>
			can result in overshoot of
			the bottleneck capacity, and is not advised.
			</t>

			<t>
                        Saved RTT
                        (saved_rtt): The
                        saved_rtt is a value in
                        milliseconds, encoded as
                        a variable-length integer.
                        This could be set to 
                        the minimum RTT (min_rtt). The
                        saved_rtt can be set to the
                        min_rtt.  NOTE: The min_rtt defined in 
                        <xref
                        target="RFC9002"></xref>, does not track a
                        decreasing RTT: therefore the
                        min_rtt reported might be larger than the
                        actual minimum RTT measured during the 1-RTT
                        connection.
			</t>
			<t>
                        Saved Endpoint Token (saved_endpoint_token) : The
			saved_endpoint_token (More details in <xref target="I-D.kuhn-quic-careful-resume"></xref>). 
			</t>
			</list>
			</t>
		</section>

		<section anchor="sec:bdp_activation" title="Extension activation">
			<t>
                	The receiver can accept the transmission
                	of BDP_FRAMEs from the sender by using
                	the enable_bdp transport
                	extension.
			</t>
			<t>
                	enable_bdp (0xTBD): in the 1-RTT
                	connection, the receiver indicates to the
                	sender that it wishes to receive BDP
                	extension Frames. The default value is 0.
			In this specification, enable_bdp values larger than 3 are reserved for future,
			and the receipt of these values MUST be treated
                	as a connection error of type TRANSPORT_PARAMETER_ERROR <xref target="RFC9000"></xref>.
			</t>
			<t><list style="symbols">
				<t>
                	        0: Default value. If the receiver
                	        does not send an enable_bdp parameter,
                	        the sender considers that the
                	        receiver does not support, or does
                	        not wish to activate, the BDP
                	        extension.
				</t>
				<t>
                	        1: The receiver indicates to the
                	        sender that it wishes to receive
                	        BDP_FRAMEs and activates the
                	        the optimization.
				</t>
				<t>
                	        2: The receiver indicates that it
                	        does not wish to receive BDP
                	        Frames but activates the
                	        optimization.
				</t>
				<t>
                	        3: The receiver indicates that it
                	        wishes to receive BDP_FRAMEs, but
                	        does not activate the
                	        optimization.
				</t>
			</list></t>
			<t>
                	This Transport Parameter is encoded as
                	described in Section 18 of 
                	<xref target="RFC9000"></xref>.
			</t>
		</section>
	</section>

	<section anchor="sec:discuss" title="Discussion">
		<t>
                A receiver using the BDP_FRAME extension has the choice
                of accepting the reuse of the previous parameters,
		or requesting the sender to not reuse the previous parameters.
		</t>
		<t>
                The BDP metadata parameters are measured by
                the sender during a previous
                connection to the same receiver. The BDP extension is
                protected by the mechanism that
                protects the exchange of the 0-RTT
                transport parameters. For version 1 of
                QUIC, the BDP extension is protected
                using the mechanism that already
                protects the "initial_max_data"
                parameter. This is defined in sections
                4.5 to 4.7 of 
                <xref target="RFC9001"></xref>.
                This provides a way for the sender to
                verify that the parameters proposed by the
                receiver are the same as those that the sender
                sent to the receiver during a previous
                connection.
		</t>

		<t>
                The sender SHOULD NOT trust
                the content of the BDP Frame received from the receiver. 
		Even if the QUIC 
                packets containing the BDP Frame are
                encrypted, a receiver could modify the
                values within the extension and
                encrypt the QUIC packet.
                One way to avoid this is for a sender to also 
                store the saved_rtt and saved_bb parameters.
		Another way to avoid this is to use the secured hash generated by the sender. If the receiver 
		modify a transport parameter, the result of the hash would be different. The sender should then 
		avoid exploiting previously estimated transport parameters. 
		</t>

	</section>
	
	<section anchor="sec:acknowledgments" title="Acknowledgments">
		<t>
                The authors would like to thank Gabriel Montenegro,
                Patrick McManus, Ian Swett, Igor Lubashev, Robin Marx,
                Roland Bless and Franklin Simo for their fruitful
                comments on earlier versions of this document.
		</t>
		<t>
                The authors would like to particularly thank Tom Jones
                for co-authoring previous versions of this document.
		</t>
	</section>

	<section anchor="sec:IANA" title="IANA Considerations">
		<t>
                TBD: Text is required to register the BDP_FRAME and the
                enable_bdp transport parameter. Parameters are
                registered using the procedure defined in 
                <xref target="RFC9000"></xref>.
		</t>
	</section>

	<section anchor="sec:security" title="Security Considerations">
		<t>
                Security considerations are discussed in 
                <xref target="sec:discuss"></xref>.
                </t>
	</section>
	</middle>

	<!--  *****BACK MATTER ***** -->
	<back>
		<!-- References split into informative and normative -->
		<!-- There are 2 ways to insert reference entries from the citation libraries:
	1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
	2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
	(for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")
	Both are cited textually in the same manner: by using xref elements.
	If you use the PI option, xml2rfc will, by default, try to find included files in the same
	directory as the including file. You can also define the XML_LIBRARY environment variable
	with a value containing a set of directories to search.  These can be either in the local
	filing system or remote ones accessed by http (http://domain/dir/... ).-->

		<references title="Normative References">		
			<?rfc include="reference.RFC.2119.xml"?>
			<?rfc include="reference.RFC.6349.xml"?>
			<?rfc include="reference.RFC.8174.xml"?>
			<?rfc include="reference.RFC.8446.xml"?>
			<?rfc include="reference.RFC.9000.xml"?>
			<?rfc include="reference.RFC.9001.xml"?>
			<?rfc include="reference.RFC.9002.xml"?>
		</references>
			
		<references title="Informative References">
			<?rfc include="reference.I-D.cardwell-iccrg-bbr-congestion-control.xml"?>
			<?rfc include="reference.I-D.kuhn-quic-careful-resume.xml"?>
			<!--
			<reference anchor="TMA18">
				<front>
					<title>Demystifying TCP Initial Window Configurations of Content Distribution Networks</title>
					<author initials="J" surname="Ruth">
					</author>
					<author initials="O" surname="Hohlfeld">
					</author>
					<date year="2018"/>
				</front>
				<seriesInfo name="2018 Network Traffic Measurement and Analysis Conference (TMA)" value=""/>
			</reference>
			--> 
		</references>
		<!-- <section anchor="appendix-numerical" title="Example">
			<t> TBD </t>
		</section> -->
	</back>
</rfc>
